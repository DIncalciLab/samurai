/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: BWA_INDEX {
        publishDir = [
            path: { "${params.outdir}/genome_index"      },
            mode: params.publish_dir_mode
        ]
        ext.when = { params.aligner == "bwamem" }
    }

    withName: BWA_MEM {
        publishDir = [
            path: { "${params.outdir}/alignment"      },
            mode: params.publish_dir_mode
        ]
        ext.when = { params.aligner == "bwamem" }
    }

    withName: BWAMEM2_INDEX {
        publishDir = [
            path: { "${params.outdir}/genome_index"      },
            mode: params.publish_dir_mode
        ]
    ext.when = { params.aligner == "bwamem2" }
    }

    withName: BWAMEM2_MEM {
        publishDir = [
            path: { "${params.outdir}/alignment"      },
            mode: params.publish_dir_mode
        ]
        ext.when = { params.aligner == "bwamem2" }
    }

    withName: PICARD_MARKDUPLICATES {
        publishDir = [
            path: { "${params.outdir}/markduplicates"     },
            mode: params.publish_dir_mode
        ]
        ext.prefix = { "${meta.id}_markdup" }
    }

    withName: SAMTOOLS_INDEX {
        publishDir = [
            path: { "${params.outdir}/markduplicates"     },
            mode: params.publish_dir_mode
        ]
    }


    withName: SAMTOOLS_IDXSTATS {
        publishDir = [
            path: { "${params.outdir}/markduplicates/stats"     },
            mode: params.publish_dir_mode
        ]
    }

    withName: SAMTOOLS_FLAGSTAT {
        publishDir = [
            path: { "${params.outdir}/markduplicates/stats"     },
            mode: params.publish_dir_mode
        ]
    }

    withName: SAMTOOLS_STATS {

        publishDir = [
            path: { "${params.outdir}/markduplicates/stats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix =  { "${meta.id}_stats" }
    }

    withName: SAMTOOLS_VIEW {
        publishDir = [
            path: { "${params.outdir}/size_selection/bam_size_selected" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = [
            "-e '((tlen > -150 && tlen < -90) || (tlen > 90 && tlen < 150)) && mapq >= 20 && flag !=0x12'",
            "--bam",
        ].join(' ')

        ext.prefix = { "${meta.id}_filtered" }
    }

    withName: SAMTOOLS_INDEX_SIZE_SELECTION {

        publishDir = [
            path: { "${params.outdir}/size_selection/bam_size_selected" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix =  { "${meta.id}_filtered" }
    }

    withName: SAMTOOLS_STATS_PRE {

        publishDir = [
            path: { "${params.outdir}/size_selection/stats_pre" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix =  { "${meta.id}_stats_pre" }
    }

    withName: SAMTOOLS_STATS_POST {

        publishDir = [
            path: { "${params.outdir}/size_selection/stats_post" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix =  { "${meta.id}_stats_post" }
    }

    withName: BAMPE_FRAGMENTSIZE_PRE {

        publishDir = [
            path: { "${params.outdir}/size_selection/length_distributions_pre" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.args = [
            params.max_fragmentsize ? "--maxFragmentLength ${params.max_fragmentsize}": "--maxFragmentLength 180",
            params.binsize ? "--binSize ${params.binsize}" : "",
            params.title ? "--plotTitle '${params.title}'" : "Fragemnt Size Distribution Before Size Selection",
        ].join(' ')
    }

    withName: BAMPE_FRAGMENTSIZE_POST {

        publishDir = [
            path: { "${params.outdir}/size_selection/length_distributions_post" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.args = [
            params.max_fragmentsize ? "--maxFragmentLength ${params.max_fragmentsize}": "--maxFragmentLength 180",
            params.binsize ? "--binSize ${params.binsize}" : "",
            params.title ? "--plotTitle '${params.title}'" : "Fragemnt Size Distribution After Size Selection",
        ].join(' ')
    }

    withName: QDNASEQ {
        publishDir = [
            [
                path: { "${params.outdir}/qdnaseq/bins" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*_bins.bed"
            ],
            [
                path: { "${params.outdir}/qdnaseq/segments" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.seg"
            ],
            [
                path: { "${params.outdir}/qdnaseq/plots" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.pdf"
            ],
            [
                path: { "${params.outdir}/qdnaseq/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.rds"
            ],
        ]
        ext.args = [
            params.genome ? "--genome ${params.genome}": "",
            params.purity ? "--purity ${params.purity}": "",
        ].join(' ')
    }

    withName: HMMCOPY_READCOUNTER_ICHORCNA {

        publishDir = [
            path: { "${params.outdir}/ichorcna/wigfiles_samples" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.args = [
            "--chromosome ${params.readcounter_chrs}",
            "--quality ${params.readcounter_quality}",
            "--window ${params.binsize * 1000}"
        ].join(' ')
    }

    withName: HMMCOPY_READCOUNTER_PON {

        publishDir = [
            path: { "${params.outdir}/ichorcna/wigfiles_pon" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.args = [
            "--chromosome ${params.readcounter_chrs}",
            "--quality ${params.readcounter_quality}",
            "--window ${params.binsize * 1000}"
        ].join(' ')
    }

    withName: ICHORCNA_GENERATE_PON {
        publishDir = [
            path: { "${params.outdir}/ichorcna/PoN/"  },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.args = [
            "--genomeStyle ${params.genome_style}",
            "--chrs \"${params.chrs_to_use}\""
        ].join(' ')
        ext.prefix = { params.pon_name ? "${params.pon_name}" : "PoN" }
    }

    withName: RUN_ICHORCNA {
        publishDir = [
            path: { "${params.outdir}/ichorcna/run" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.args = [
            "--maxCN ${params.max_cn}",
            "--chrTrain \"${params.chrs_to_train}\"",
            "--chrs \"${params.chrs_to_use}\"",
            "--txnE ${params.txne}",
            "--txnStrength ${params.trx_strength}",
            "--minMapScore ${params.min_map_score}",
            "--fracReadsInChrYForMale ${params.fraction_reads_male}",
            "--minSegmentBins ${params.min_segment_bins}",
            "--maxFracGenomeSubclone ${params.max_frac_genome_subclone}",
            "--maxFracCNASubclone ${params.max_frac_cna_subclone}",
            "--includeHOMD ${params.include_homd}",
            "--altFracThreshold ${params.alt_frac_threshold}",
            "--genomeStyle ${params.genome_style}",
            "--plotFileType ${params.plotfiletype}",
            "--plotYLim '${params.plotylim}'",
            "--normal 'c(${params.normal_states})'",
            "--genomeBuild ${params.genome}",
            params.estimate_ploidy ? "--ploidy 'c(2, 3, 4, 5)'": "",
            params.estimate_ploidy ? "--estimatePloidy TRUE": "--estimatePloidy FALSE",
            params.estimate_sc ? "--estimateScPrevalence TRUE": "--estimateScPrevalence FALSE",
            params.estimate_sc ? "--scStates 'c(1,3)'": "--scStates 'c()'"
        ].join(' ')
    }

    withName: AGGREGATE_TABLE {
        publishDir = [
            path: { "${params.outdir}/ichorcna/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CONCATENATE_BIN_PLOTS {
        publishDir = [
            path: { "${params.outdir}/cn_plots"     },
            mode: params.publish_dir_mode
        ]
    }

    withName: CONCATENATE_SEG_PLOTS {
        publishDir = [
            path: { "${params.outdir}/cn_plots"     },
            mode: params.publish_dir_mode
        ]
    }

    withName: NORMAL_CONVERT {
        publishDir = [
            path: { "${params.outdir}/wisecondorx/pon_converted_npz" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: WISECONDORX_NEWREF {
        publishDir = [
            path: { "${params.outdir}/wisecondorx/${params.pon_name}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = [
            params.binsize ? "--binsize ${params.binsize}000": "--binsize 500000",
            params.yfrac ? "--yfrac ${params.yfrac}": ""
        ].join(' ')
        ext.prefix = { "${params.pon_name}" }
    }

    withName: WISECONDORX_PREDICT {
        publishDir = [
            path: { "${params.outdir}/wisecondorx/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = [
            params.ylim ? "--ylim ${params.ylim}": "",
            params.zscore ? "--zscore ${params.zscore}": "",
        ].join(' ')
        
    }

    withName: CONVERT_GISTIC_SEG {
        publishDir = [
            path: { "${params.outdir}/wisecondorx/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        
    }

    withName: ASSEMBLE_OUTPUTS {
        publishDir = [
            path: { "${params.outdir}/wisecondorx/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        
    }

    withName: CONVERT_IMAGES {
        publishDir = [
            path: { "${params.outdir}/cn_plots/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
