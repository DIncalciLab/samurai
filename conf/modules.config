/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: FASTP {
        publishDir = [
            path: { "${params.outdir}/trimmed_reads"      },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = [
           params.fastp_cut_window_size ? "--cut_window_size ${params.fastp_cut_window_size}" : "",
           params.fastp_min_quality ? "--qualified_quality_phred ${params.fastp_min_quality}" : "",
           params.fastp_max_trimmed_pct ? "--unqualified_percent_limit ${params.fastp_max_trimmed_pct}" : "",
           params.fastp_trim_poly_x ? "--trim_poly_x": "",
           params.fastp_min_read_length ? "--length_required ${params.fastp_min_read_length}": "--disable_length_filtering",
           "--correction",
           params.fastp_trim_poly_g ? "--trim_poly_g": "",
           "--cut_tail",
           params.fastp_umi_loc ? "--umi" : "",
           params.fastp_umi_loc ? "--umi_prefix UMI" : "",
           params.fastp_umi_loc ? "--umi_loc ${params.fastp_umi_loc}": "--umi_loc per_read",
           params.fastp_umi_length && params.fastp_umi_loc ? "--umi_len ${params.fastp_umi_length}": "--umi_len 6",
           params.fastp_umi_skip && params.fastp_umi_loc ? "--umi_skip ${params.fastp_umi_skip}": "",
        ].join(' ')
    }

    withName: BWA_INDEX {
        publishDir = [
            path: { "${params.outdir}/genome_index"      },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.when = { params.aligner == "bwamem" }
    }

    withName: BWA_MEM {
        publishDir = [
            path: { "${params.outdir}/alignment"      },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.when = { params.aligner == "bwamem" }
    }

    withName: BWAMEM2_INDEX {
        publishDir = [
            path: { "${params.outdir}/genome_index"      },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    ext.when = { params.aligner == "bwamem2" }
    }

    withName: BWAMEM2_MEM {
        publishDir = [
            path: { "${params.outdir}/alignment"      },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.when = { params.aligner == "bwamem2" }
    }

    withName: PICARD_MARKDUPLICATES {
        publishDir = [
            path: { "${params.outdir}/markduplicates"     },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.id}_markdup" }
    }

    withName: SAMTOOLS_INDEX {
        publishDir = [
            path: { "${params.outdir}/markduplicates"     },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    withName: SAMTOOLS_IDXSTATS {
        publishDir = [
            path: { "${params.outdir}/markduplicates/stats"     },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_FLAGSTAT {
        publishDir = [
            path: { "${params.outdir}/markduplicates/stats"     },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_STATS {

        publishDir = [
            path: { "${params.outdir}/markduplicates/stats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix =  { "${meta.id}_stats" }
    }

    withName: SAMTOOLS_VIEW {
        publishDir = [
            path: { "${params.outdir}/size_selection/bam_size_selected" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = [
            "-e '((tlen > -${params.selection_maxsize} && tlen < -90) || (tlen > 90 && tlen < ${params.selection_maxsize})) && mapq >= 20 && flag !=0x12'",
            "--bam",
        ].join(' ')

        ext.prefix = { "${meta.id}_filtered" }
    }

    withName: SAMTOOLS_INDEX_SIZE_SELECTION {

        publishDir = [
            path: { "${params.outdir}/size_selection/bam_size_selected" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix =  { "${meta.id}_filtered" }
    }

    withName: SAMTOOLS_STATS_PRE {

        publishDir = [
            path: { "${params.outdir}/size_selection/stats_pre" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix =  { "${meta.id}_stats_pre" }
    }

    withName: SAMTOOLS_STATS_POST {

        publishDir = [
            path: { "${params.outdir}/size_selection/stats_post" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.prefix =  { "${meta.id}_stats_post" }
    }

    withName: BAMPE_FRAGMENTSIZE_PRE {

        publishDir = [
            path: { "${params.outdir}/size_selection/length_distributions_pre" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.args = [
            params.max_fragmentsize ? "--maxFragmentLength ${params.max_fragmentsize}": "--maxFragmentLength 180",
            params.binsize ? "--binSize ${params.binsize}" : "",
            params.title ? "--plotTitle '${params.title}'" : "Fragemnt Size Distribution Before Size Selection",
        ].join(' ')
    }

    withName: BAMPE_FRAGMENTSIZE_POST {

        publishDir = [
            path: { "${params.outdir}/size_selection/length_distributions_post" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.args = [
            params.max_fragmentsize ? "--maxFragmentLength ${params.max_fragmentsize}": "--maxFragmentLength 180",
            params.binsize ? "--binSize ${params.binsize}" : "",
            params.title ? "--plotTitle '${params.title}'" : "Fragemnt Size Distribution After Size Selection",
        ].join(' ')
    }

    withName: QDNASEQ {
        publishDir = [
            [
                path: { "${params.outdir}/qdnaseq/bins" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*_bins.bed"
            ],
            [
                path: { "${params.outdir}/qdnaseq/segments" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.seg"
            ],
            [
                path: { "${params.outdir}/qdnaseq/plots" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.pdf"
            ],
            [
                path: { "${params.outdir}/qdnaseq/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.rds"
            ],
        ]
        ext.args = [
            params.genome ? "--genome ${params.genome}": "",
            params.qdnaseq_bin_data ? "--bin-data ${params.qdnaseq_bin_data}": ""
        ].join(' ')
        cpus = 12
    }

    withName: CREATE_QDNASEQ_SUMMARY {
        publishDir = [
            path: { "${params.outdir}/qdnaseq/"     },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: HMMCOPY_READCOUNTER_ICHORCNA {

        publishDir = [
            path: { "${params.outdir}/ichorcna/wigfiles_samples" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.args = [
            "--chromosome ${params.ichorcna_readcounter_chrs}",
            "--quality ${params.ichorcna_readcounter_quality}",
            "--window ${params.binsize * 1000}"
        ].join(' ')
    }

    withName: HMMCOPY_READCOUNTER_PON {

        publishDir = [
            path: { "${params.outdir}/ichorcna/wigfiles_pon" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.args = { [
            meta.gender == 'female' ? "--chromosome ${params.ichorcna_readcounter_chrs},chrX": "--chromosome ${params.ichorcna_readcounter_chrs},chrX,chrY",
            "--quality ${params.ichorcna_readcounter_quality}",
            "--window ${params.binsize * 1000}"
        ].join(' ') }
    }

    withName: ICHORCNA_GENERATE_PON {
        publishDir = [
            path: { "${params.outdir}/ichorcna/PoN/"  },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.args = [
            "--genomeStyle ${params.ichorcna_genome_style}",
            "--genomeBuild ${params.genome}",
            "--chrNormalize \"${params.ichorcna_chrs_to_use}\"",
            "--maleChrXLogRThres \"${params.ichorcna_male_chrX_logR}\""
        ].join(' ')
        ext.prefix = { params.pon_name ? "${params.pon_name}" : "PoN" }
    }

    withName: RUN_ICHORCNA {
        publishDir = [
            path: { "${params.outdir}/ichorcna" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.args = [
            "--maxCN ${params.ichorcna_max_cn}",
            "--chrTrain \"${params.ichorcna_chrs_to_train}\"",
            "--chrs \"${params.ichorcna_chrs_to_use}\"",
            "--txnE ${params.ichorcna_txne}",
            "--txnStrength ${params.ichorcna_trx_strength}",
            "--minMapScore ${params.ichorcna_min_map_score}",
            "--fracReadsInChrYForMale ${params.ichorcna_fraction_reads_male}",
            "--minSegmentBins ${params.ichorcna_min_segment_bins}",
            "--maxFracGenomeSubclone ${params.ichorcna_max_frac_genome_subclone}",
            "--maxFracCNASubclone ${params.ichorcna_max_frac_cna_subclone}",
            "--includeHOMD ${params.ichorcna_include_homd}",
            "--altFracThreshold ${params.ichorcna_alt_frac_threshold}",
            "--genomeStyle ${params.ichorcna_genome_style}",
            "--plotFileType ${params.ichorcna_plotfiletype}",
            "--plotYLim '${params.ichorcna_plotylim}'",
            "--normal 'c(${params.ichorcna_normal_states})'",
            "--genomeBuild ${params.genome}",
            params.ichorcna_estimate_ploidy ? "--ploidy 'c(2, 3, 4, 5)'": "",
            params.ichorcna_estimate_ploidy ? "--estimatePloidy TRUE": "--estimatePloidy FALSE",
            params.ichorcna_estimate_sc ? "--estimateScPrevalence TRUE": "--estimateScPrevalence FALSE",
            params.ichorcna_estimate_sc ? "--scStates 'c(1,3)'": "--scStates 'c()'"
        ].join(' ')
    }

    withName: AGGREGATE_ICHORCNA_TABLE {
        publishDir = [
            path: { "${params.outdir}/ichorcna" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CORRECT_LOGR_ICHORCNA {
        publishDir = [
            path: { "${params.outdir}/ichorcna" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CONCATENATE_QDNASEQ_PLOTS {
        publishDir = [
            path: { "${params.outdir}/cn_plots/qdnaseq/"     },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: NORMAL_CONVERT {
        publishDir = [
            path: { "${params.outdir}/wisecondorx/pon_converted_npz" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = [
            params.binsize ? "--binsize ${params.binsize}000": "--binsize 500000",
        ].join(' ')
    }

    withName: WISECONDORX_CONVERT {
        publishDir = [
            path: { "${params.outdir}/wisecondorx/converted_npz/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
         ext.args = [
            params.binsize ? "--binsize ${params.binsize}000": "--binsize 500000",
        ].join(' ')
    }

    withName: WISECONDORX_NEWREF {
        publishDir = [
            path: { "${params.outdir}/wisecondorx/${params.pon_name}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = [
            params.binsize ? "--binsize ${params.binsize}000": "--binsize 500000",
            params.wisecondorx_yfrac ? "--yfrac ${params.wisecondorx_yfrac}": ""
        ].join(' ')
        ext.prefix = { "${params.pon_name}" }
    }

    withName: WISECONDORX_PREDICT {
        publishDir = [
            path: { "${params.outdir}/wisecondorx/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = [
            params.wisecondorx_ylim ? "--ylim ${params.wisecondorx_ylim}": "",
            params.wisecondorx_zscore ? "--zscore ${params.wisecondorx_zscore}": "",
        ].join(' ')

    }

    withName: CONVERT_GISTIC_SEG {
        publishDir = [
            path: { "${params.outdir}/wisecondorx/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

    }

    withName: ASSEMBLE_WISECONDORX_OUTPUTS {
        publishDir = [
            path: { "${params.outdir}/wisecondorx/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

    }

    withName: CONVERT_WISECONDORX_IMAGES {
        publishDir = [
            path: { "${params.outdir}/cn_plots/wisecondorx/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

    }

    withName: ASCAT_SC {
        publishDir = [
            path: { "${params.outdir}/ascat_sc/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.args = [
            "--segmentation_alpha ${params.ascat_sc_segmentation_alpha}",
            "--min-ploidy ${params.ascat_sc_min_ploidy}",
            "--max-ploidy ${params.ascat_sc_max_ploidy}",
            "--max-purity ${params.ascat_sc_max_purity}",
            "--min-purity ${params.ascat_sc_min_purity}",
            "--max-tumor-ploidy ${params.ascat_sc_max_tumor_ploidy}",
            params.ascat_sc_predict_refit ? "--predict_refit TRUE": "--predict_refit FALSE"
        ].join(' ')
    }

    withName: CONCATENATE_BIN_PLOTS {
        publishDir = [
            path: { "${params.outdir}/cn_plots/ichorcna"     },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CONCATENATE_ASCATSC_PLOTS {
        publishDir = [
            path: { "${params.outdir}/cn_plots/ascat_sc"     },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CONCATENATE_ASCATSC_REFITTED_PLOTS {
        publishDir = [
            path: { "${params.outdir}/cn_plots/ascat_sc_refitted"     },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CREATE_ASCATSC_SUMMARY {
        publishDir = [
            path: { "${params.outdir}/ascat_sc/"     },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CIN_SIGNATURE_QUANTIFICATION {
        publishDir = [
            path: { "${params.outdir}/signatures/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = [
            "--genome ${params.genome}",
            "--projectname '${params.caller}'"
        ].join(' ')

    }

    withName: GISTIC2 {
        publishDir = [
            path: { "${params.outdir}/gistic/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') || filename.equals('gistic_results') ? null : filename }
        ]
        ext.args = [
                "-ta ${params.gistic_t_amp}",
                "-td ${params.gistic_t_del}",
                "-rx ${params.gistic_remove_x}",
                "-conf ${params.gistic_conf}",
                "-savegene 1",
                "-savedata 0"
        ].join(' ')
    }

    withName: ASSEMBLE_GISTIC_OUTPUT {
        publishDir = [
            path: { "${params.outdir}/gistic/final_results/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = [
                "--genome ${params.genome}",
        ].join(' ')
    }

     withName: MAFTOOLS {
        publishDir = [
            path: { "${params.outdir}/gistic/final_results/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = [
                "--ref_build ${params.genome}",
        ].join(' ')

    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
