/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    samurai Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    input                      = null


    // References
    genome                     = "hg38"
    igenomes_base              = 's3://ngi-igenomes/igenomes'
    igenomes_ignore            = false

    // Alignment options
    index_genome               = false
    aligner                    = 'bwamem'
    fasta                      = null
    fai                        = null
    dict                       = null
    aligner_index              = null

    // Trimming options
    run_fastp                  = false
    fastp_umi_loc              = null
    fastp_umi_length           = null
    fastp_umi_skip             = null
    fastp_min_read_length      = null
    fastp_cut_window_size      = 4
    fastp_min_quality          = null
    fastp_max_trimmed_pct      = null
    fastp_trim_poly_x          = false
    fastp_trim_poly_g          = false




    // Size selection options
    size_selection             = false
    title                      = "Fragment size distribution"
    max_fragmentsize           = 400

    // Segmentation / CNV calling options
    binsize                    = 500
    purity                     = 1

    // CN Calling algorithms
    caller                     = 'qdnaseq'
    analysis_type              = 'solid_biopsy'

    // Liquid Biopsy Options

    normal_panel               = null
    pon_path                   = null
    pon_name                   = "PoN"
    build_pon                  = false
    selection_maxsize          = 150
    filter_bam_pon             = false // TO DO: FIX this
    plot_fragment_distribution = false

    // QDNAseq

    qdnaseq_bin_data           = null
    qdnaseq_paired_ends        = "TRUE"

    // ichorCNA

    ichorcna_genome_style               = 'UCSC'
    ichorcna_readcounter_chrs           = "chr1,chr2,chr3,chr4,chr5,chr6,chr7,chr8,chr9,chr10,chr11,chr12,chr13,chr14,chr15,chr16,chr17,chr18,chr19,chr20,chr21,chr22"
    ichorcna_readcounter_quality        = 20
    ichorcna_chrs_to_use                = "paste0('chr', c(1:22))"
    ichorcna_chrs_to_train              = "paste0('chr', c(1:22))"
    ichorcna_chrs_to_normalize          = "paste0('chr', c(1:22))"
    ichorcna_estimate_normal            = "TRUE"
    ichorcna_fraction_reads_male        = 0.001
    ichorcna_male_chrX_logR             = 0.3
    ichorcna_min_map_score              = 0.75
    ichorcna_max_frac_genome_subclone   = 0.5
    ichorcna_max_frac_cna_subclone      = 0.7
    ichorcna_min_segment_bins           = 50
    ichorcna_max_cn                     = 5
    ichorcna_include_homd               = "FALSE"
    ichorcna_txne                       = 0.9999
    ichorcna_alt_frac_threshold         = 0.05
    ichorcna_trx_strength               = 10000
    ichorcna_plotfiletype               = "pdf"
    ichorcna_plotylim                   = "c(-2,4)"
    ichorcna_estimate_sc                = false
    ichorcna_estimate_ploidy            = true
    ichorcna_filter_bam_pon             = false
    ichorcna_normal_states              = "0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99"
    ichorcna_gc_wig                     = null
    ichorcna_map_wig                    = null
    ichorcna_reptime_wig                = null
    // FIXME: Supply it with the pipeline
    ichorcna_centromere_file            = null


    // WisecondorX

    wisecondorx_no_rm_dup                  = false
    wisecondorx_yfrac                      = 0.4
    wisecondorx_ylim                       = null
    wisecondorx_zscore                     = 3
    wisecondorx_blacklist                  = null

    // ASCAT.sc

    ascat_sc_predict_refit              = "TRUE"
    ascat_sc_segmentation_alpha         = 0.01
    ascat_sc_min_purity                 = 0.01
    ascat_sc_max_purity                 = 1
    ascat_sc_min_ploidy                 = 1.7
    ascat_sc_max_ploidy                 = 5
    ascat_sc_max_tumor_ploidy           = 5

    // Signatures
    compute_signatures         = false

    // Gistic2
    run_gistic                 = false
    gistic_t_amp               = 0.1
    gistic_t_del               = 0.1
    gistic_remove_x            = 0
    gistic_conf                = 0.99

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Boilerplate options
    outdir                     = 'results'
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    version                    = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'genomes'


    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null


    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = 'genomes,igenomes_base'
    validationShowHiddenParams       = false
    validate_params                  = true
    validationSkipDuplicateCheck     = false
    validationS3PathCheck            = false

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load dincalcilab/samurai custom profiles from different institutions.
// Warning: Uncomment only if a pipeline-specific instititutional config already exists on nf-core/configs!
// try {
//   includeConfig "${params.custom_config_base}/pipeline/samurai.config"
// } catch (Exception e) {
//   System.err.println("WARNING: Could not load nf-core/config/samurai profiles: ${params.custom_config_base}/pipeline/samurai.config")
// }


profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 16
        executor.memory        = 60.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

// Nextflow plugins
plugins {
    id 'nf-validation' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

manifest {
    name            = 'dincalcilab/samurai'
    author          = 'Sara Potente, Luca Beltrame'
    homePage        = 'https://github.com/dincalcilab/samurai'
    description     = "SAMURAI: Shallow Analysis of Copy nuMber alterations Using a Reproducible And Integrated bioinformatics pipeline"
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
